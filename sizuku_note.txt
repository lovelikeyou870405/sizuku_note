微軟正黑體

font-family: Microsoft JhenHei;

筆記:
Rest Parameters(餘下參數):當要傳入的參數數量不確定時，就可以使用餘下參數，方式:三個連續的點加上參數名稱。
ex. function NumberSum(...numbers){}
*傳入的numbers資料會被存成陣列模式。
*呼叫方式:numbers(1,2)也可以numbers(1,2,3,4,5)

Vue元件要設定在Vue router、Vue實例之前，否則會抓不到。

alias(別名屬性)，可以為原先的路由取個別名，網址上看到的就會是後來命名的alias就不會是原本path的名字。別名也可以取很多個，像是綽號一樣。

redirect(重新導向屬性)，可以把原先要前往的路由導向其他路由。像是本來要導到'/home'，加上redirect:'/about'後，就會被改成導到'/about'。

path的設定值是一個星號的話，表示任意的路徑名稱。

Navigation Guards(導覽警衛裝置)，提供給開發人員用來保護某些頁面的安全機制，由導覽警衛裝置在"切換至該頁面路由前"做"安全檢查"來決定是否放行，如果經過驗證就會放行，如果不是，則會被導向登入頁面。
在路由裡面加上meta屬性，裡面將requiresAuth設定為true。

< Bootstrap筆記 >
行列(col、row)-大小(lg[大螢幕桌機]、md[桌機]、sm[平板]、xs[手機])-占多少欄(滿欄是12，沒寫的話就是自動=>那一欄有剩的就會平均分配給未填寫的)

auto:依照內容自動調整變動寬度。

no-gutters:取消欄與欄之間的間隙。

對齊的部分:
justify-content-start:對齊flex容器的起點。
justify-content-center:對齊flex容器的中央。
justify-content-end:對齊flex容器的終點。
justify-contnet-around:在flex容器中平均對齊。
justify-content-between:對齊flex容器的起點及終點(兩側)。

display的部分:
d-none:display:none的意思。
d-大小(lg、md、sm、xs)-none或block:在此大小範圍時，是否顯示。none:不顯示，block:顯示。

顏色的部分:
primary:藍色
secondary:灰色
success:綠色
danger:紅色
warning:黃色
info:淡藍色
light:淺色
dark:深色

留白的部分:
{m(margin)、p(padding)}{t(top)、b(bottom)、l(left)、r(right)、x(*-left和 *-right)、y(*-top和 *-bottom)、空白(設定四個邊緣)}-{0~5($spacer*0.25n)、auto}

ex. 上內距2 => pt-2

文字的部分:
text-center:文字置中。


< php筆記 >
瀏覽器端Scripts:嵌入在HTML原始碼的小程式，由瀏覽器負責執行。
伺服器端Scripts:嵌入在HTML原始碼的小程式，由伺服器負責執行。

appserv 密碼: rootroot

<?php ?> 標示PHP程式碼區塊
以下也可以，但不推薦:
<? ?>
<script language="php">...</script>
<% %>

如何將php程式碼寫在外部檔案:
1.將寫完的php程式碼存成 .inc 檔。
2.在網頁內設定外部的路徑:
<?php include_once("路徑"); ?>

有四種內建函式可以設定外部PHP路徑:
include、include_once、require、require_once
其中include系列的為:發生錯誤時，僅會提出警告，require系列則會終止程式執行。有無once則表示載入外部的PHP檔案只會進行一次，不會重複定義函式而導致錯誤。

關鍵字(保留字):由PHP所定義，所以不能使用關鍵字來定義一般的變數或常數。
特殊字元:小括號、大括號、分號、錢字符號、多行註解符號等。
識別字:程式設計人員可以自行定義新字，作為變數、函式或類別名稱。

PHP會區分變數名稱與常數名稱的英文字母大小寫。
PHP每行結尾需加上分號。

<型別>
*純量型別(scalar type):
**整數(integer):
前面加上0表示八進位、0x表示十六進位、0b表示二進位。
ex. 010:八進位的8、0x10十六進位的16、0b10二進位的2。
**浮點數(float、double)
**布林(boolean):
除了整數0、浮點數0.0、空字串""、"0"、沒有元素的陣列、沒有成員的物件、NULL會轉成false，其餘皆轉成true。
**字串(string):
若要取得變數名稱，則會取得$符號後面到下一個不是英文字母、數字及底線(_)的字元之間的字串，將他當成變數名稱。

*特殊型別(special type):
**NULL:
沒有大小寫之分，意義是沒有值(no value)。
**資源(resource):
用來指向PHP程式的外部資源，例如:資料庫、檔案、圖形畫布等。當我們要手動釋放資源時，可以將指向資源的變數設定為NULL。
ex. 
$my_resource = mysql_connect();
$my_resource = NULL;

*複合型別(compound type):
**陣列(array)
**物件(object)

[檢查型別]
*gettype(arg)
傳回參數arg的型別，"integer"、"double"、"boolean"、"string"、"NULL"、"resource"、"array"、"object"、"unknown type"。

*is_integer(arg)、is_int(arg)、is_long(arg)
判定是否為整數型別。

[轉換型別]
(int)、(integer)、(float)、(double)...用小括號括起來後面接變數名稱表示有明確轉換資料型別。
ex. (int)varName
settype(var,type):函式設定型別，第一個參數放要改變的變數名稱，第二個參數放指定的型別。
ex. settype(varName,int)

<變數>
變數名稱的前面必須加上錢字符號($)，且不可以以數字為頭。
變數在使用之前無須宣告型別，同時在執行時視情況轉換型別。
*可變動變數:可以動態設定變數名稱。
ex. 
$var = "happy"; //設定一個變數var值為happy。
$$var = "birthday"; //設定一個變數happy值為birthday。

*isset(arg)
若不是null，則回傳true。
*unset(arg)
將arg設定為null。
*empty(arg)
若arg的值是空的，就傳回true。空的指的是整數0、浮點數0.0、""、"0"、空陣列、null、false、$var;(在類別內宣告且尚未設定值的變數)。
*intval(arg)
傳回arg的整數值。
ex. intval(4.2); //傳回4
*floatval(arg)
傳回arg的浮點數值。
ex. floatval("12.34ab"); //傳回12.34

<常數>
常數值不會隨著程式的執行而改變。使用define(name,value)設定:
ex. define("pi",3.14);

PHP的字串運算子是點"."
ex. echo "a"."b";

$a**$b => a的b次方

錯誤控制運算子(@):在運算式前面加上@時，運算式可能產生的錯誤訊息將會被忽略。

執行運算子(``):可以用來執行shell命令。

PHP的if:
語法: 
if(condition1){ 

}elseif(condition2){

}else{

}

PHP的switch:
語法:
switch(expression){
 case value:
	statements1;
	break;
 case value2:
	statements2;
	break;
 default:
	statementsn;
}

for(;;) 無窮迴圈

break:強制離開迴圈
continue:在迴圈內跳過後面的敘述，直接返回迴圈的開端。

PHP的foreach:
語法1: 陣列
foreach(arr as $value){ }
arr:陣列名稱。
$value:在foreach中的元素名稱。
ex.
$city = array('city1','city2');
foreach($city as $value){
 echo $value;
}

語法2: 有鍵值的陣列
foreach(arr as $key => $value){ }
$key:鍵。
ex.
$city = array('city1'=>'東京','city2'=>'台北');
foreach($city as $key => $value){
 echo '鍵:'.'$key'.'值:'.'$value';
}

count(arr)、sizeof(arr):
傳回陣列arr包含幾個元素。

unset( $arr[value] ):
把arr陣列中value的那個清空。

next($arr)、prev($arr):
next是呼叫arr的下一個元素(第一次會呼叫到$arr[1])，此時用prev會呼叫arr的上一個元素(此時呼叫到$arr[0])。

array_pad(arr,size,value):
將陣列arr的大小設定為size，不足的元素會填入value。
ex.
$a = array('a','b');
array_pad($a,5,'x'); // $a=('a','b','x','x','x');

array_serch(value, arr):
若陣列arr有值為value，就會回傳元素的鍵，否則回傳false。

array_slice(arr, offset[, length])

array_push(arr, arg1[, arg2,...]):
將arg1...加到arr的尾端。

array_pop(arr):
將arr的尾端一個元素移除。

shuffle(arr):
將arr裡面的元素弄亂，每次都有不一樣的驚喜。

array_unshift(arr, arg1[,arg2...]):
將arg1...加到陣列arr的前端。

array_shift(arr):
將arr的前端一個元素移除。

asort(arr):
將陣列arr內的元素依值進行(由小到大)排序。

arsort(arr):
將陣列arr內的元素依值進行(由大到小)排序。

ksort(arr):
將陣列arr內的元素依鍵值進行(由小到大)排序。

krsort(arr):
將陣列arr內的元素依鍵值進行(由大到小)排序。

<函式>
使用者自訂函式:
語法:
function functionName([arg])[:return_type]
{
	statements;
}

arg:帶入參數。
[:return_type]:宣告傳回值的型別，PHP7新增的功能。

變動長度參數串列:
ex.
function tour(...$cities)
{
	foreach($cities as $value)
		echo $value;
}

在函式內使用global可以定義為全域變數，進而更改函式外的變數。
在函式內使用static可以定義為靜態變數，函式呼叫結束時不會釋放掉靜態變數，而是會保留下來。

<數學函式>
abs(x):傳回x的絕對值。
ceil(x):傳回比x大1的整數。
ex. ceil(4.3); //5
floor(x):傳回比x小1的整數。
ex. floor(4.3); //4
round(x[,precision]):將x四捨五入取到小數點後precision位數。
pow(base,exp):取次方值，傳回base的exp次方。
sqrt(x):取x的平方根。
max(arr1[,arr2...]):取出其中的最大數。
min(arr1[,arr2...]):取出其中的最小數。
rand([min,max]):傳回一個小於等於max、大於min的亂數。


<日期時間函式>
PHP紀錄日期時間的方式是以UNIX時間刻記，時間刻記是從1970/1/1到指定日期所經過的秒數。
getdate([int timestamp]):將timestamp指定的時間刻記轉換成日期時間格式。其回傳值為一個陣列，包含:seconds、minutes、hours、mday、wday(以數字格式紀錄星期幾，0表示星期日、1表示星期一)、mon、year(西元年分)、yday(一年的第幾天)、weekday(以英文名稱紀錄星期幾)、month(以英文名稱紀錄月份)、0(時間刻記秒數)。
ex.
$Today = getdate();
$Today["year"]; //2020;
$Today["weekday"]; //Firday;

time():取得目前的時間資訊，回傳值為時間刻記。
checkdate(int month, int day, int year):判斷輸入的日期是否為有效日期。
ex.
checkdate(13,3,2020); //false; //因為沒有13月。

<字串>
strtolower(str):將字串str轉換成小寫字母。
strtoupper(str):將字串str轉換成大寫字母。
ucwords(str):將字串str的每個單字第一個字元轉成大寫。
ord(str):取得字串str中第一個字元的ASCII碼。
chr(int ascii):將數字ascii轉換成其ASCII代表字元。
strrev(str):將字串str的字元順序顛倒。

str_replace(search, replace, strArr[, int count])、str_ireplace(search, replace, strArr[, int count]):將字串strArr裡面的search替換成replace，count則是用來設定一個變數以存放成功取代字串的次數。其中str_replace()和str_ireplace()的差別在於str_replace()會區分英文字母大小寫，另一個則不會。
ex.
$str = "shopping list";
str_replace("p","P",$str,$count); //$str="shoPPing list"; //$count=2;

strlen(string str):取得字串str的長度。
str_repeat(string input, int count):傳回包含count次的input所組成的字串。
ex.str_repeat("x",3); //xxx

substr(string str, int start[, int length]):字串str第start+1個字開始回傳length個字元。
ex.substr("happy birthday",3,5); //"py bi";

ltrim(str[, string charlist]):刪除字串str最左邊符合charlist指定的字元，若沒填入charlist則會刪除字串str左邊的空白字元。

rtrim(str[, string charlist])、chop(str[, string charlist]):刪除字串str最右邊符合charlist指定的字元，若沒填入charlist則會刪除字串str右邊的空白字元。

nl2br(str):將字串str中包含的換行符號\n、\r或\r\n轉換成HTML換行元素<br>。

implode(str, arr)、join(str, arr):將陣列arr中的元素，以str隔開後組成一個新的字串。
ex.
$source = array("jennifer","peter");
implode(" ",$source); //"jennifer peter";

explode(string separator, str):以字串separator作為分隔符號，將字串str分割為多個子字串後回傳字串陣列。
ex.
$str = "i am happy.";
explode(" ",$str); //"i","am","happy.";

<檔案>
basename(str path[, str suffix]):取得指定路徑的檔案名稱，suffix用來設定回傳結果要排除的字串。
ex.
$path = $_SERVER['PHP_SELF']; //$_SERVER['PHP_SELF']:目前網頁的路徑。
echo basename($path); //此檔案名稱.php
echo basename($path,'.php'); //此檔案名稱 //這邊排除了.php

pathinfo(str):將指定路徑分割為路徑名稱(dirname)、檔案名稱(basename)、副檔名(extension)，並傳回陣列。
ex. /ch/path.php
$path = $_SERVER['PHP_SELF'];
$path['dirname']; // /ch;
$path['basename']; // path.php;
$path['extension']; //php;

realpath(str):取得檔案的絕對路徑。
mkdir(pathname[,int mode[, bool recursive]]):建立資料夾，pathname為建立的資料夾路徑，mode為權限模式，windows系統會忽略此參數，recursive用來指定資料夾路徑的其中一個或多個資料夾不存在時，是否一併加以建立。
getcwd():取得目前工作資料夾。
chdir(dir):切換目前工作資料夾到路徑dir。
rmdir(dir):刪除路徑為dir的資料夾。
is_dir(filename):判斷filename是否為資料夾。
file_exists(filename):用來判斷filename是否存在。
chmod(filename, int mode):用來更改filename的權限為mode，windows會忽略此函式。
dirname(path):取得路徑path的父資料夾名稱。
scandir(dir[, int order]):取得dir內的檔案，排序方式取決於order，預設為遞增，若要遞減則設定為1。
is_file(filename):判斷filename是否為檔案。
copy(source, dest):將source的檔案複製到dest路徑上，並名稱為dest路徑的名稱。
unlink(filename):刪除檔案filename。
rename(oldname, newname):將檔案oldname的名字改成newname。
fopen(filename,string mode):用來開啟filename，mode是選擇用甚麼方式開啟檔案，r唯讀、r+可讀寫、w唯寫且清除檔案內容，並將指標置於檔案最前端、w+可讀寫且清除檔案內容，並將指標置於檔案最前端、a唯寫並將指標置於檔案最前端、a+可讀寫，並將指標置於檔案最前端、x唯寫，並將指標置於檔案最前端、x+可讀寫，並將指標置於檔案最前端。
fread(filename, int length):讀取檔案filename內容，從length的地方開始讀取，抵達檔案尾端(EOF,End Of File)時停止。
fclose(filename):將檔案filename關閉。
fgets(resource handle):從檔案handle指標處讀取一行資料。
feof(resource handle):判定handle是否讀完。
ex.
$handle = fopen("test.txt","r");
while(!feof($handle))
{
	echo fgets($handle);
}
fclose($handle);
fwrite(handle, str)、fputs(handle, str):將字串str寫入檔案handle中。
ex. hello.txt裡面已經有"hello"
$contents="world";
$handle = fopen("hello.txt","a");
fwrite($handle, $contents);
fclose($handle);

file_put_contents(filename, data):無須開啟關閉檔案就可將指定內容寫入檔案內。

<GD繪圖,GD:Gif Draw>
imagecreate(int x, int y)、imagecreatetruecolor(int x, int y):建立空畫布，差別在imagecreatetruecolor支援百萬色。
ex. $im1 = imagecreatetruecolor(1024, 768);
imagecolorallocate(image, int red, int green, int blue):指派image畫布可使用的色彩。
ex. 
$white = imagecolorallocate($im1, 255, 255, 255); //指派白色;
*第一個指派的顏色會變成該畫布的背景色。
imageellipse(img, int x, int y, int w, int h, int color):繪製寬度為w高度為h的橢圓形在畫布img的(x,y)處，顏色為color。
ex.
imageellipse($im1, 100, 100, 50, 50, $white); //在畫布$im1的(100,100)處繪製一個長寬為50、顏色為白色的橢圓形;
imageline(img, int x1, int y1, int x2, int y2, int color):在畫布img中繪製一條由(x1,y1)至(x2,y2)的直線，顏色為color。
imagepolygon(img, arr points, int num, int color):在畫布img中繪製一個有num個點，每個點的位置為arr陣列中的(x,y)的多邊形，顏色為color。
ex.
//繪製由座標(210,50)、(140,80)、(110,20)、(155、50)所構成的多邊形。
$points = array(210,50,140,80,110,20,155,50);
$im = imagecreatetruecolor(250,100);
$background = imagecolorallocate($im,255,255,0);
$black=imagecolorallcate($im,0,0,0);
imagepolygon($im,$points,4,$black);
imagerectangle(img, int x1, int y1, int x2, int y2, int color):在畫布img中繪製一個由座標(x1,y1)為左上角，(x2,y2)為右下角端點的矩形，顏色為color。
imagearc(img, int x, int y, int w, int h, int s, int e, int color):在畫布img中的(x,y)處繪製一個寬度為w高度為h的圓弧，開始的角度為s，結束角度為e，顏色為color。
imagefill(img, int x, int y, int color):填滿，在畫布img的(x,y)處以顏色color填滿。
imagefilledellipse(img, x, y, w, h, color):橢圓形填滿。
imagefilledpolygon(img, points, num, color):多邊形填滿。
imagefilledrectangle(img, x1, y1, x2, y2, color):矩形填滿。
imagechar(img, int size, x, y, str, color):在畫布img的(x,y)處繪製一個大小為size(1~5)的文字str的第一個字元，顏色為color。
imagecharup(img, size, x, y, str, color):和上一個一樣，差別在繪製直向字元。
imagestring(img, size, x, y, str, color):繪製橫向文字(整個字串)。
imagestringup(img, size, x, y, str, color):繪製直向文字(整個字串)。

[輸出圖形]
imagejpeg(img[, filename[, int quality]]):向瀏覽器傳送jpeg檔，或把jpeg檔存至伺服器。品質為quality(1~100)數字越大、品質越好。若filename省略，表示將畫布傳至瀏覽器，必須設定輸出至瀏覽器的MIME類型。
ex. 將圖形傳到瀏覽器:
header("content-type:image/jpeg");
imagejpeg($im, null, 90);
ex. 將圖形儲存到伺服器:
imagejpeg($im, "images/pic1.jpeg",100);
imagegif(img[, filename]):向瀏覽器傳送gif檔，或把gif檔存至伺服器。若filename省略，表示將畫布傳至瀏覽器，必須設定輸出至瀏覽器的MIME類型。
ex. 將圖形傳到瀏覽器:
imagegif($im, "images/pic1.gif");
ex. 將圖形儲存在伺服器:
header("content-type:image/gif");
imagegif($im);
imagepng(img[, filename]):向瀏覽器傳送png檔，或把png檔存至伺服器。若filename省略，表示將畫布傳至瀏覽器，必須設定輸出至瀏覽器的MIME類型。
imagedestory(img):將畫布釋放占用記憶體。
getimagesize(filename):用來取得圖形大小與格式。回傳值為4個元素的陣列，第1個元素為圖形寬度，第2個元素為圖形高度，第3個元素為圖形格式(1:gif、2:jpg、3:png、4:swf、5:psd、6:bmp、7:IBM PC的TIFF、8:Mac的TIFF、9:jpc、10:jp2、11:jpx、12:jb2、13:swc、14:iff、15:wbmp、16:xbm)，第4個元素為html格式的語法。
imagecreatefromgif(filename)、imagecreatefromjpeg(filename)、imagecreatefrompng(filename):用來讀取gif、jpeg、png檔。

<例外與錯誤處理>
exception物件:這是例外本身，包含錯誤訊息、錯誤代碼、檔案路徑、錯誤行數等資訊。
try...catch語法:用來捕捉代表例外本身的exception物件。

ex.
function open_file($file)
{
	if(file_exists($file))	//檢查資料是否存在
		opendir($file);
	else
		throw new Exception('欲開啟的資料不存在');	不存在就擲出例外
}
try{
	open_file("C:\\book");	//嘗試開啟不存在的檔案
}
catch(Exception $e)
{
	echo '錯誤訊息:'.$e.getMessage().'<br>';	//顯示例外的錯誤訊息
	echo '錯誤代碼:'.$e.getCode().'<br>';		//顯示例外的錯誤代碼
	echo '檔案路徑:'.$e.getFile().'<br>';		//顯示例外的檔案路徑
	echo '錯誤行數:'.$e.getLine().'<br>';		//顯示例外的錯誤行數
}

[錯誤(Error)]
Notice(注意):這種錯誤不會影響程式執行，會被忽略，不會顯示錯誤訊息，也不會終止程式。
Warning(警告):這種錯誤會顯示錯誤訊息，但不會終止程式。
Error(錯誤):這種錯誤會顯示錯誤訊息，同時會終止程式。

error_reporting([int error_type]):設定PHP會報告哪些類型的錯誤。
0(關閉所有錯誤報告)、E_ALL(報告所有錯誤)...等等。

restore_error_handler():將錯誤處理程式恢復成之前的設定。

error_log(str message[, int message_type[, str destination[, str extra_headers]]]):將message指定的錯誤訊息傳至Web伺服器的錯誤紀錄檔案、TCP連接埠或指定檔案，由message_type(0:傳到錯誤記錄檔案，這是預設值。1:傳到destination指定的電子郵件地址，郵件標頭為extra_headers。2:傳到destination指定的遠端主機IP位址。3:傳送到destination指定的檔案。)決定。

ParseError:當PHP程式的語法錯誤時，會擲出此例外。

TypeError:當型別錯誤時，會擲出此例外，例如函式的參數型別錯誤、函式的回傳值型別錯誤、PHP內建函式的參數個數錯誤。

ArithmeticError:當算術運算錯誤時，會擲出此例外。

<物件導向>
[存取層級(accsee level)]
public、var:能夠被任何程式碼存取。
private:只能被包含其定義的類別存取。
protected:只能被包含其定義的類別或其子類別存取。

在物件內，以->運算子來存取物件成員。
$this指的是物件本身。
類別屬於參考型別(reference type)，無法直接存取，需要使用new建立類別的物件。
若沒有建立物件，想使用其方法則使用::運算子(可以用來存取類別內的靜態成員，還能用來存取類別內的常數或被覆蓋的成員[overriden member])。

[static(靜態)]
純粹是要提供一般用途的成員讓使用者存取。

[類別常數]
在類別內定義常數(constant)，語法:const constName = value; ，但存取常數時，只能透過類別名稱和::運算子，不能透過物件。
ex.
<?php
class Circle
{
	const PI = 3.14;
	public $Radius;
	public function ShowArea()
	{
		echo '圓面積為'.($this->Radius * $this->Radius * self::PI);
		//self代表目前類別;
	}
}
echo '圓周率為'.Circle::PI.'<br>;	//透過類別名稱和::運算子存取常數;
?>

[建構函式(constructor)]
將物件初始化的函式，建立物件時會自動執行，函式名稱為 __construct (注意:前面是兩個底線)。建構函式有無參數皆可，沒有回傳值。

[解構函式(destructor)]
用來釋放物件所佔用的系統資源的函式，釋放物件時會自動執行，無須在程式碼內加以呼叫，函式名稱為 __destruct (注意:前面是兩個底線)。解構函式沒有參數，也沒有回傳值。
ex.
<?php
class Employee
{
	public $Name;
	function __construct($str)
	{
		$this->Name = $str;
		echo '已經建立名字:'.$this->Name.'<br>';
	}
	function __destruct()
	{
		$this->Name = NULL;
		echo '這個物件已經被釋放';
	}
}

$obj = new Employee('Hsuan');	//建立物件(會自動執行建構函式)
$obj = NULL;	//釋放物件(會自動執行解構函式)
?>

==:兩個物件隸屬於同一個類別，且有相同的屬性、值的時候，會回傳TRUE。
===:兩個物件是相同類別的相同物件時，會回傳TRUE。
ex.
<?php
class Employee
{
    public $Name;
    function __construct($str)
    {
        $this->Name = $str;
    }
}
$obj1 = new Employee('name');
$obj2 = new Employee('name');
$obj3 = $obj1;
if($obj2==$obj1)    //true,$obj2和$obj1的成員、值相同
if($obj2===$obj1)   //false,$obj2和$obj1指向不同物件
if($obj3===$obj1)   //true,$obj3和$obj1指向相同物件
?>

[匿名類別(anonymous class)]
ex.
<?php
$obj = new class('name')
{
    public $Name;
    function __construct($str)
    {
        $this->Name = $str;
    }
}
?>

[繼承(inheritance)]
從既有的類別(父類別)建立新的類別(子類別)。
父類別、基底類別(base class、parent class、superclass)
子類別、衍生類別、擴充類別(child class、subclass、derived class、extended class)
子類別會繼承父類別的非私有成員，還可以加入新的成員或覆蓋父類別的方法。
一個父類別可以被多的子類別所繼承。

語法:
class childclass_name extends parentclass_name
{
    //...;
}

存取層級:
public、var:可以被任何程式碼存取，包括被繼承。
private:只能被包含其定義的類別存取，不能被繼承。
protected:只能被包含其定義的類別或子類別存取，包括被繼承。

private的成員只能被父類別內的程式碼存取，安全性較高。

[覆蓋(override)]
子類別將繼承自父類別的方法重新定義。
如果要在子類別呼叫父類別的方法，可以用parent::method_name()呼叫，parent代表目前所在的父類別。
如果在父類別有不想讓子類別覆蓋的方法，可以在方法前面加上final來禁止子類別覆蓋父類別的方法。
ex.
final public function payment(){}   //這樣子類別就無法覆蓋payment();

[抽象方法(abstract method)]
必須放在抽象類別(abstract class)內，只有定義的部分，沒有實作的部分。實作的部分必須由子類別提供。抽象類別只能被繼承，不能被實體化(instantiation)。
ex.
<?php
abstract class Payroll
{
    public $Name;
    abstract public function Payment($Hours, $PayPate);  //定義抽象方法
}
class BonusPayroll extends Payroll
{
    public function Payment($Hours, $PayRate)
    {
        //覆蓋抽象方法(參數個數必須相同)
        return $Hours * $PayRate +5000;
    }
}
$obj = new BonusPayroll();
echo $obj->Payment(100,80);
?>

子類別會繼承父類別的建構函式與解構函式，若子類別沒有定義自己的建構函式與解構函式，就會分別自動執行父類別的建構函式與解構函式。

[命名空間(namespace)]
用來組織個個類別、函式、常數等，就像檔案系統中目錄與檔案的關係一樣。
ex. MyClass隸屬於 \A\B\C 命名空間，若要建立一個obj隸屬於MyClass物件:
$obj = new \A\B\C\MyClass;
第一個反斜線\表示全域空間(global space)，就像檔案系統中的跟目錄一樣。
namespace必須放在檔案的最前端，而且檔案必須存為UTF-8編碼。
ex.
<?php
namespace my\name;  //在全域空間內定義my\name命名空間
class MyClass{}     //在\my\name命名空間內定義MyClass類別
function Myfunction(){} 在\my\name命名空間內定義Myfunction()函式
const myConst = 1;  //在\my\name命名空間內定義常數myConst
$x = new \my\name\MyClass;  //建立類別
$y = \my\name\myConst;      //取常數值
?>

簡寫可以用use 命名空間 as 簡寫。
ex.
namespace my\name;
use my\name as A;
//使用別名A取代my\name命名空間

若要匯入命名空間類別、函式或常數，可使用:
use my\name\{ClassA, ClassB, ClassC as C};  //匯入類別
use function my\name\{funA, funB, funC};    //匯入函式
use const my\name\{constA, constB, constC}; //匯入常數

<在網頁之間傳遞資訊>

<form>元素常用屬性:
accept="..." :設定MIME類型(超過一個的話，中間以逗號隔開)，作為Web伺服器處理表單資料的根據。
ex. accept="image/gif, image/jpeg"

action="url" :設定表單處理程式的相對或絕對位址，若要傳送到email，可以設定email的url。
ex. <form method="post" action="handler.php"></form>
ex. <form method="post" action="mailto:test@gmail.com"></form>

enctype="..." :設定將表單資料傳回Web伺服器所採取的編碼方式，預設值為"application/x-www-form-urlencoded"，若允許上傳檔案給Web伺服器，則設定為"multipart/form-data"，若要將表單資料傳送到電子郵件，則設定為"text/plain"。

method="{get, post}" :設定表單資料傳送給表單處理程式的方法，
method="get"時，表單資料會被存放在HTTP GET變數($_GET)，表單資料會附加在網址後面進行傳送，適合用來傳送少量、不要求安全的資料，例如搜尋關鍵字。
method="post"時，表單資料會被存放在HTTP POST變數($_POST)，表單資料會透過HTTP標頭進行傳送，適合用來傳送大量或要求安全性的資料，例如上傳檔案、密碼。而且post會將瀏覽者輸入的密碼加以編碼。

[HTTP Header]
HTTP Header = Request Header + Response Header
Request Header(要求標頭) :當瀏覽器向Web伺服器送出要求時，會將欲開啟之網頁的網址、自己的瀏覽器類型、版本等資訊一併傳送過去。
Response Header(回應標頭) :當Web伺服器回應瀏覽器的要求時，會將欲開啟的網頁、該網頁的檔案大小、日期等資訊傳送給瀏覽器。

[Cookie]
瀏覽者造訪某些網站時，Web伺服器在用戶端寫入的一些小檔案，Cookie是儲存在用戶端的記憶體或磁碟。
Cookie儲存在用戶端的記憶體或磁碟，不會佔用伺服器資源。

setcookie(name[, value, int expire, path, str domain, bool secure]) :PHP內建的函式，作用為寫入cookie。其中:name為cookie的名稱，只有這個參數不能省略。value:值，若填入""則表示刪除cookie。expire:生命週期(生命週期內沒有設定這個參數，那麼cookie是存放在用戶端的記憶體，當瀏覽器終止執行時，cookie就會消失而不會寫入用戶端的磁碟)，單位為秒，用time()+幾秒。ex. time()+60*60*24 (一天)。path:cookie在用戶端的存放路徑。domain:設定能夠存取cookie的網域。secure:設定是否經由安全連線(SSL、HTTPS)。建構函式有無參數皆可，沒有回傳值。
*使用setcookie()存入的值(value)會被加以編碼，若不要將值編碼，則可使用setrawcookie()。
*寫入相同名稱的cookie時，後面的會覆蓋前面的值。
*寫入cookie的動作必須放在任何輸出的前面，否則會導致setcookie()失敗。解決方法:在輸出前面呼叫ob_start()，就可以將輸出先放進緩衝區，等寫入cookie完成後，再呼叫ob_end_flash()，取出緩衝區的輸出。

$_COOKIE["cookieName"] :透過變數 $_COOKIE 讀取cookie。

[Session]
將瀏覽器資料存放在伺服器端的記憶體，相當於伺服器端的cookie。不過為了減輕伺服器端的負擔，一般還是建議以cookie取代session。
Session ID(SID) :瀏覽器存取網頁時被指派的一個唯一的識別字。
Session 變數 :這是Session所記錄的變數，存放在伺服器端的特殊檔案，而且是一個Session ID有一個檔案。

我們可以透過 $_SESSION 存取Session所記錄的變數。

session_start() :啟用session功能。任何要存取session的網頁前面都要呼叫。
session_id() :取得目前瀏覽器的session ID。

*只要瀏覽器沒有關閉，session紀錄的變數就會被保留下來。即使開啟其他網頁，之後回到這個網頁，變數值仍不會消失。

session_unset() :釋放所有session變數。
session_destroy() :清除所以session變數的值。
session_name([str name]) :若設定name則表示以name取代目前的session名稱。若沒填入參數，則表示回傳目前session的名稱。
session_regenerate_id() :重新產生一個session ID。
session_encode() :將目前的session內容加以編碼，然後傳回編碼後的字串。
session_decode(str data) :將data加以解碼，還原成目前的session內容。
session_save_path([str path]) :設定session存放路徑。
session_write_close()、session_commit() :儲存session資料並終止session，通常在程式結束時，session資料都會被儲存，無須另外呼叫這個函式。

session_set_cookie_params(int lifetime[, str path, str domain, bool secure]) :必須放在session_start()前面，用來設定php.ini組態設定檔內的session.cookie_lifetime(設定session cookie的生命週期，預設為0，表示持續到瀏覽器關閉，若變更為其他數字，則表示秒數)、session.cookie_paht(設定路徑)、session.cookie_domain(設定有效網域)、session.cookie_secure(設定是否經由安全連線)。

session_get_cookie_params() :傳回php.ini組態設定檔內的參數值。

<Ajax(Asynchronous JavaScript And XML)>
使用非同步技術，讓網頁更新得更滑順。
無須將整個網頁內容傳回伺服器，能夠節省網路頻寬。
由於只回傳部分資料，能夠減輕伺服器的負荷。
不會有像傳統動態網頁產生短暫空白或閃動的情況。

[建立XML HttpRequest物件]
使用JavaScript建立XMLHttpRequest物件
IE5瀏覽器:
var XHR = new ActiveXObject("Microsoft.XMLHTTP");
IE6+瀏覽器:
var XHR = new ActiveXObject("Msxmal2.XMLHTTP");
其他非IE瀏覽器:
var XHR = new XMLHttpRequest();
由於無法事先得知瀏覽器的種類，所以可以如下撰寫:
ex.
function createXMLHttpRequest()
{
	try	//其他非IE瀏覽器
	{
		var XHR = new XMLHttpRequest();
	}
	catch(e1)	//捕捉到錯誤，表示不是非IE瀏覽器
	{
		try	//IE6+瀏覽器
		{
			var XHR = new ActiveXObject("Msxmal2.XMLHTTP");
		}
		catch(e2)	//捕捉到錯誤，表示不是IE6+瀏覽器
		{
			try	//IE5瀏覽器
			{
				var XHR = new ActiveXObject("Microsoft.XMLHTTP");
			}
			catch(e3)	//捕捉到錯誤，表示不支援Ajax
			{
				var XHR = false;
			}
		}
	}
	return XHR;
}
這樣往後網頁需要建立XMLHttpRequest物件，就將此js檔include進來，然後呼叫createXMLHttpRequest()即可:
var XHR = createXMLHttpRequest();

[傳送Http Request]
XHR.open(str method, str URL, bool async) :設定要向伺服器要求甚麼資源，method設定建立Http連線的方式(GET、POST、HEAD)，URL為欲要求的檔案位址，async用來設定是否使用非同步呼叫，預設值為true。

在伺服器收到資料，進行處理並回傳結果後，XMLHttpRequest物件的readyState屬性會變更，觸發onreadystatechange事件，可以透過onreadystatechange接收Http Response。

XHR.send(str content) :送出Http Request，content是欲傳送給伺服器的參數，以GET傳送時，content為null；以POST傳送時，則可設定要傳送的參數。

[接收Http Response並更新網頁內容]
接收Http Response的程式碼是寫在onreadystatechange事件處理程序。
readyState屬性會記錄目前處於階段，回傳值為0-4，4表示執行完畢。但不代表執行成功，需靠status屬性，200為成功，404為資源不存在。
abort() :停止Http Request。
getAllResponseHeaders() :取得所有回應標頭資訊。
getResponseHeader(str name) :取得name所指定的回應標頭資訊。

<SQL>
[select指令(選取資料)]
SELECT 欄位名稱 FROM 資料表名稱 [WHEERE 搜尋子句] [ORDER BY 排序子句{ASC|DESC}]
ex. 從grade資料表選取所有紀錄的name和english兩個欄位，並更名為"姓名"和"英文"
SELECT name AS 姓名, english AS 英文 FROM grade
*AS :命名
ex. 從grade資料表選取所有紀錄的name欄位，將chinese、math、english三個欄位相加後的分數產生新的total欄位
SELECT name, chinese+math+english AS total FROM grade

ex. 從grade選取所有紀錄的name、math，並math分數大於90
SELECT name, math FROM grade WHERE math > 90
*WHERE可以包含任何邏輯運算，只要回傳值為TRUE或FALSE即可:
	= 等於
	< 小於、 <= 小於等於
	> 大於、 >= 大於等於
	!=、<> 不等於
	AND 運算元均為TRUE
	OR 任一個運算元為TRUE即可
	NOT 運算元為TRUE就回傳FALSE，為，為FALSE就回傳TRUE
ex. 從grade篩選chinese大於90或math大於90紀錄的name、chinese、math
SELECT name, chinese, math FROM grade WHERE chinese>90 OR math>90

*LIKE運算子(接受萬用字元、前後要加上單引號):
	% 任何長度的字串(包括0)
	_ 任何一個字元
	[] 某個範圍內的一個字元
ex. 從grade篩選name是以"陳"開頭紀錄的所有欄位
SELECT * FROM grade WHERE name LIKE '陳%'
ex. 從grade篩選name是"X小美"紀錄的name、english、math，X代表任一字元
SELECT name, english, math FROM grade WHERE name LIKE '_小美'
ex. 從grade篩選name以a、b、c、d、e、f字母為首，後面ean紀錄的所有欄位
SELECT * FROM grade WHERE name LIKE '[a-f]ean'

*IN判斷欄位資料的範圍
ex. 篩選chinese為80、85或88紀錄的所有欄位
SELECT * FROM grade WHERE chinese IN (80,85,88)
ex. 名字為陳小心、林小佩、孫小美紀錄的所有欄位
SELECT * FROM grade WHERE name IN ('陳小心','林小佩','孫小美')

*BETWEEN限制篩選範圍
ex. 篩選math在80~90之間(包含80、90)紀錄的所有欄位
SELECT * FROM grade WHERE math BETWEEN 80 AND 90

*ORDER BY(排序)預設為遞增(ASC)，遞減為DESC
ex. 先以國文遞減，再依數學遞減
SELECT * FROM grade ORDER BY chinese DESC, math DESC

*LIMIT 設定最多回傳筆數
ex. 按照chinese遞減並只看5筆
SELECT * FROM grade ORDER BY chinese DESC LIMIT 5
ex. 按照chinese遞減並從第4筆開始，只看5筆
SELECT * FROM grade ORDER BY chinese DESC LIMIT 3,5

[INSERT指令(新增紀錄)]
INSERT INTO 資料表名稱(欄位1,欄位2...) VALUES (資料1,資料2...)
ex. 在grade新增一筆新紀錄，欄位內容為no:A8608011、name:小丸子、chinese:88、math:95、english:92
INSERT INTO grade(no, name, chinese, math, english) VALUES('A8608011','小丸子',88,95,92)

[UPDATE指令(更新紀錄)]
UPDATE 資料表名稱 SET 欄位1=資料1, 欄位2=資料2... WHERE 條件
ex. 在grade中學號為'A8608011'的name更新為'張小毛'
UPDATE grade SET name='張小毛' WHERE no='A8608011'

[DELETE指令(刪除紀錄)]
DELETE FROM 資料表名稱 WHERE 條件
ex. 刪除grade中english低於85且math低於85的紀錄
DELETE FROM grade WHERE english < 85 AND math < 85

<PHP 與 MySQL>
[建立資料連結]
在使用PHP存取MySQL之前，必須建立資料連結。
mysqli_connect([str host, str username, str password, str dbname]) :
host為伺服器的電腦名稱、DNS名稱或IP位址，若省略預設值為localhost:3306。
username為登入MySQL資料庫伺服器的帳號。
password為登入MySQL資料庫伺服器的密碼。
dbname為預設的資料庫名稱。
*在使用mysqli_connect()發生錯誤時，會出現額外的錯誤訊息，若不要在網頁上顯示這些錯誤訊息，可以在mysqli_connect()的前面加上運算子@(忽略錯誤)。

die("content") :終止程式並顯示content文字。

[關閉資料連結]
mysqli_close($link)

[存取MySQL資料庫伺服器]
mysqli_get_client_info() :取得MySQL用戶端版本資訊。
mysqli_get_host_info($link) :取得主機的相關資訊，$link是經由TCP/IP通訊協定連接至localhost伺服器。
mysqli_get_proto_info($link) :取得資料庫協定的版本資訊。
mysqli_get_server_info($link) :取得資料庫伺服器的版本資訊。

mysqli_connect_errno() :傳回最近一次呼叫mysqli_connect()所產生的錯誤代碼。
mysqli_connect_error() :傳回最近一次呼叫mysqli_connect()所產生的錯誤訊息。
mysqli_errno($link) :傳回最近一次存取MySQL資料庫所產生的錯誤代碼。
mysqli_error($link) :傳回最近一次存取MySQL資料庫所產生的錯誤訊息。

[執行SQL查詢]
mysqli_select_db($link, str dbname) :開啟資料庫，dbname為欲開啟的資料庫名稱。
mysqli_query($link, str query) :執行SQL語法查詢，query為欲執行的SQL語法。其執行結果為:
失敗:一律回傳false。
成功:回傳true，當執行SELECT、SHOW、EXPLAIN或DESCRIBE時，會回傳資源識別字(mysqli_result 物件)，類似位於記憶體內的資料庫。
ex.
mysqli_query($link, "SET NAMES utf8");
*設定編碼為utf8才不會出現亂碼。

mysqli_num_rows(result) :適用於SELECT，可以傳回選取的紀錄筆數。
mysqli_num_fields(result) :適用於SELECT，可以傳回選取的欄位數目。
mysqli_affected_rows(result) :適用於INSERT、UPDATE、REPLACE、DELETE等，可以傳回有多少筆紀錄受到該指令的影響。
*若使用於DELETE時沒有給予WHERE條件的話，mysqli_affected_rows()回傳為0，表示紀錄全部被刪除，而不是實際刪除的筆數。
*若最近一次執行SQL查詢結果為失敗，mysqli_affected_rows()會回傳-1。
*若執行UPDATE時，mysqli_affected_rows()回傳的是實際更新的紀錄筆數，而不是WHERE的紀錄筆數，因為當指定的新值和舊值相同時，並不會有更新的動作。

[取得欄位資訊]
mysqli_fetch_field_direct($result, int field_offset) :取得欄位資訊，field_offset為欄位的序號，0表示第一個欄位，依此類推。其回傳值為object型別，常用的屬性有:
name:欄位名稱。
orgname:欄位原始名稱。
table:欄位所屬資料表名稱。
orgtable:欄位所屬資料表原始名稱。
db:欄位所屬資料庫名稱。
max_length:欄位實際存放的最大長度，不是資料庫內設定的資料長度。
length:欄位在資料庫內設定的資料長度。
type:欄位型態，3代表integer、10代表date、253代表varchar。
mysqli_fetch_field($result) :取得欄位名稱、資料行帶、最大長度。
mysqli_fetch_row($result) :用來讀取一筆紀錄。
mysqli_free_result($result) :釋放記憶體。
mysqli_fetch_array($result[, int type]) :用來讀取紀錄並存放在陣列，然後將記錄指標移到下一筆，若讀不到紀錄就回傳FALSE。type有MYSQLI_NUM(表示只能用欄位序號取得欄位內容)、MYSQLI_ASSOC(表示只能用欄位名稱取得欄位內容)、MYSQLI_BOTH(表示可以使用欄位序號或欄位名稱取得欄位內容)。
mysqli_fetch_assoc($result) :用來讀取紀錄內容並存放在陣列，然後將記錄指標移到下一筆。
mysqli_fetch_object($result) :讀取紀錄內容，然後將紀錄指標移到下一筆。
mysqli_data_seek($result, int num) :用來移動紀錄指標，num為記錄序號，0表示第一筆，1表示第二筆...。

<檔案上傳>
組態設定檔(預設路徑: C:\AppServ\php7\php.ini)
file_uploads :設定是否允許經由HTTP進行檔案上傳。
upload_tmp_dir :設定檔案上傳時所要使用的暫存資料夾(預設路徑: C:\Windows\Temp)。
upload_mas_filesize :設定允許上船的允許上傳的檔案大小(預設2MB)。
post_max_size :設定使用POST傳送回伺服器時，所允許傳送的最大容量(預設8MB)。
max_input_time :設定使用POST傳送回伺服器時，所允許傳送的最長時間(預設60秒)。
*php.ini 裡面的參數名稱前面若以分號(;)開頭，則表示被註解起來，要啟用的話，需要將分號刪除。


[前端]
表單的編碼方式必須設定為"multipart/form-data"
<form metho="post" action="..." enctype="multipart/form-data"></form>

<input type="file" name="...">

若要插入多個檔案欄位，需要設定相同的name，並且值必須為陣列。
<input type="file" name="myfile[]">

可以在表單中插入一個隱藏欄位，名稱為MAX_FILE_SIZE，用來設定允許上傳的檔案大小(單位為位元組)。
<input type="hidden" name="MAX_FILE_SIZE" value="1048576">
*1048576=1MB=1024*1024

[後端]
取得上傳檔案的資訊:
$_FILES["欄位名稱"]["name"] :取得檔案的名稱。
$_FILES["欄位名稱"]["type"] :取得上傳檔案的MIME類型。
$_FILES["欄位名稱"]["size"] :取得檔案大小，單位為位元組。
$_FILES["欄位名稱"]["tmp_name"] :取得暫存路徑及檔案名稱。
$_FILES["欄位名稱"]["error"] :取得錯誤代碼。0:成功。1:檔案大小超過php.ini所設定的大小。2:超過網頁MAX_FILE_SIZE隱藏欄位所設定的大小。3:檔案上傳不完整。4:找不到欲上傳檔案。
*若是多個檔案，則後面需要加上[]:
ex. $_FILES["欄位名稱"]["name"][0]

移動檔案:
move_uploaded_file(str filename, str destination) :將暫存檔案移至指定資料夾，filename為暫存檔案的路徑及名稱，可以透過$_FILES["欄位名稱"]["tmp_name"]取得，destination為目的檔案的路徑及檔案名稱。
*當destination指定的目的檔案已存在，會覆蓋原來的檔案，而且當成是執行完畢時，無論有沒有搬移暫存檔，暫存檔都會被自動刪除。
*在big5編碼作業系統裡會無法正確處理中文檔名，若上傳的檔案可能包含中文檔名，可使用iconv()將檔名由UTF-8轉成Big5編碼。



















